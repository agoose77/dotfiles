#!/usr/bin/env python3
import os
import subprocess
import gnome_pomodoro_client.api as pomodoro_api
import datetime


def get_config(name, class_, resource, default=""):
    path = name, class_, resource
    xresource = '.'.join(path)
    env = "_".join(path).upper()
    
    try:
        return os.environ[env]
    except KeyError:
        return subprocess.check_output(
            ['xrescat', xresource, default]
        ).decode()

        
break_icon = get_config('i3xrocks', 'pomodoro', 'breakIcon', '\uF176')
pause_icon = get_config('i3xrocks', 'pomodoro', 'pauseIcon', '\uF51A')
inactive_icon = get_config('i3xrocks', 'pomodoro', 'inactiveIcon', '\uF51E︁')
active_icon = get_config('i3xrocks', 'pomodoro', 'activeIcon', '\uF51B︁')

value_colour = get_config('i3xrocks', 'value', 'color', "#D8DEE9")
label_colour = get_config('i3xrocks', 'label', 'color', "#7B8394")
value_font = get_config('i3xrocks', 'value', 'font', "Source Code Pro Medium 13")


def get_icon(state):
    if state['is_paused']:
        return pause_icon
    
    status = state['state']
    if status == "pomodoro": 
        return active_icon
        
    if status == "short-break" or status == "long-break": 
        return break_icon
        
    return inactive_icon


def display_pomodoro(state):
    label_icon = get_icon(state)
    
    minutes_remaining = round(state['remaining'] / 60)
    icon_text = f'<span color="{label_colour}">{label_icon}</span>'
    # Full description
    print(f'{icon_text}<span font_desc="{value_font}" color="{value_colour}"> {minutes_remaining}m</span>', flush=True)
    # Short description
    print(icon_text, flush=True)


def handle_input(button):
    if button == "1":
        subprocess.check_call(["gnome-pomodoro", "--start"])
    elif button == "2":
        subprocess.check_call(["gnome-pomodoro", "--pause-resume"])
    else:
        subprocess.check_call(["gnome-pomodoro", "--stop"])



if __name__ == "__main__":
    proxy = pomodoro_api.get_dbus_proxy()
    state = pomodoro_api.get_proxy_state(proxy)
    
    if button := os.environ.get("BLOCK_BUTTON"):
        handle_input(button)
        
    display_pomodoro(state)
    
    
